schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

input AccountDeletInput
  @join__type(graph: PAYMENT)
{
  connection: Connection
  account: String
}

type AccountLink
  @join__type(graph: PAYMENT)
{
  object: String
  created: Int
  expires_at: Int
  url: String
}

input AccountLinkInput
  @join__type(graph: PAYMENT)
{
  connection: Connection
  account: String
  refresh_url: String
  return_url: String
}

input AddBundleDefinitionFeatureInput
  @join__type(graph: PLAN)
{
  groups: [BundleDefinitonGroup]
}

input AddDiscountConditions
  @join__type(graph: PLAN)
{
  minimum_products: Int
}

input AddDiscountFeatureInput
  @join__type(graph: PLAN)
{
  type: AddDiscountFeatureType!
  amount: Float!
  duration: Int
  conditions: [AddDiscountConditions]
}

enum AddDiscountFeatureType
  @join__type(graph: PLAN)
{
  PERCENTAGE @join__enumValue(graph: PLAN)
  FIXED @join__enumValue(graph: PLAN)
}

input AddProductsFeatureInput
  @join__type(graph: PLAN)
{
  step: [Int]!
  products: [ProductFeature]!
  send_message: PlanFeatureMessage
}

type Address
  @join__type(graph: SUBSCRIPTION, key: "id")
  @join__type(graph: USER, key: "id")
{
  id: BigInt!
  user_id: BigInt @join__field(graph: USER)
  first_name: String @join__field(graph: USER)
  last_name: String @join__field(graph: USER)
  phone_country_code: String @join__field(graph: USER)
  phone_number: String @join__field(graph: USER)
  address_line_1: String @join__field(graph: USER)
  address_line_2: String @join__field(graph: USER)
  state: String @join__field(graph: USER)
  city: String @join__field(graph: USER)
  postal_code: String @join__field(graph: USER)
  country: String @join__field(graph: USER)
  is_default: Boolean @join__field(graph: USER)
  type: address_type @join__field(graph: USER)
  actor: BigInt @join__field(graph: USER)
  deleted: Boolean @join__field(graph: USER)
}

enum address_type
  @join__type(graph: USER)
{
  DELIVERY @join__enumValue(graph: USER)
  BILLING @join__enumValue(graph: USER)
  COMPANY @join__enumValue(graph: USER)
}

scalar BigInt
  @join__type(graph: ECOMMERCE)
  @join__type(graph: COMPANY)
  @join__type(graph: PAYMENT)
  @join__type(graph: PLAN)
  @join__type(graph: PRODUCT)
  @join__type(graph: SUBSCRIPTION)
  @join__type(graph: UPLOAD)
  @join__type(graph: USER)

type BoxSubscription
  @join__type(graph: PAYMENT, key: "id", resolvable: false)
  @join__type(graph: SUBSCRIPTION, key: "id")
{
  id: BigInt!
  user_id: BigInt! @join__field(graph: SUBSCRIPTION)
  plan_id: BigInt! @join__field(graph: SUBSCRIPTION)
  foreign_ids: JSON @join__field(graph: SUBSCRIPTION)
  status: status_type! @join__field(graph: SUBSCRIPTION)
  delivery_day: String @join__field(graph: SUBSCRIPTION)
  renew_at: DateTime @join__field(graph: SUBSCRIPTION)
  cancelled_at: DateTime @join__field(graph: SUBSCRIPTION)
  step: Int @join__field(graph: SUBSCRIPTION)
  contract_amount: Float @join__field(graph: SUBSCRIPTION)
  contract_currency: String @join__field(graph: SUBSCRIPTION)
  address: Address @join__field(graph: SUBSCRIPTION)
  recurring: recurring_type @join__field(graph: SUBSCRIPTION)
  actor: BigInt @join__field(graph: SUBSCRIPTION)
  purchase_type: purchase_type @join__field(graph: SUBSCRIPTION)
  subscriptions_plans_products_variants: [SubscriptionPlanProductVariant] @join__field(graph: SUBSCRIPTION)
  plan: Plan @join__field(graph: SUBSCRIPTION)
  user: User @join__field(graph: SUBSCRIPTION)
  cart_line: [CartLine] @join__field(graph: SUBSCRIPTION)
  invoice_item: [InvoiceItem] @join__field(graph: SUBSCRIPTION)
  order_subscription: [OrderSubscription] @join__field(graph: SUBSCRIPTION)
}

type BundleDefinitionGroup
  @join__type(graph: PLAN)
{
  name: String
  quantity: Int
  products: [ProductVariant]
}

input BundleDefinitonGroup
  @join__type(graph: PLAN)
{
  name: String
  quantity: Int
  products: [BigInt]
}

enum CacheControlScope
  @join__type(graph: PLAN)
  @join__type(graph: USER)
{
  PUBLIC @join__enumValue(graph: PLAN) @join__enumValue(graph: USER)
  PRIVATE @join__enumValue(graph: PLAN) @join__enumValue(graph: USER)
}

type Cart
  @join__type(graph: PAYMENT, key: "id")
  @join__type(graph: SUBSCRIPTION, key: "id")
  @join__type(graph: SUBSCRIPTION, key: "user_id")
  @join__type(graph: USER, key: "user_id")
{
  id: BigInt! @join__field(graph: PAYMENT) @join__field(graph: SUBSCRIPTION)
  coupon_discount: CouponDiscount @join__field(graph: PAYMENT)
  user_id: BigInt @join__field(graph: SUBSCRIPTION) @join__field(graph: USER)
  items: [SubscriptionCart] @join__field(graph: SUBSCRIPTION)
  total: Float @join__field(graph: SUBSCRIPTION)
}

type CartLine
  @join__type(graph: SUBSCRIPTION, key: "id")
{
  id: BigInt!
}

type Category
  @join__type(graph: PLAN, key: "id")
{
  id: BigInt!
  name: String!
  slug: String!
  icon: String!
}

type Company
  @join__type(graph: COMPANY, key: "id")
  @join__type(graph: PAYMENT, key: "id")
  @join__type(graph: PLAN, key: "id")
  @join__type(graph: SUBSCRIPTION, key: "id")
  @join__type(graph: USER, key: "id")
{
  id: BigInt!
  name: String @join__field(graph: COMPANY, type: "String!") @join__field(graph: PLAN, type: "String")
  country: String @join__field(graph: COMPANY)
  phone_country_code: String @join__field(graph: COMPANY)
  phone_number: String @join__field(graph: COMPANY)
  about_us: String @join__field(graph: COMPANY)
  currency: String @join__field(graph: COMPANY)
  vat: String @join__field(graph: COMPANY)
  vat_percent: String @join__field(graph: COMPANY)
  taly_percent: Float @join__field(graph: COMPANY)
  order_email: String @join__field(graph: COMPANY)
  type: role_company_type @join__field(graph: COMPANY)
  foreign_ids: JSON @join__field(graph: COMPANY)
  headquarter_country: String @join__field(graph: COMPANY)
  website: String @join__field(graph: COMPANY)
  industries: String @join__field(graph: COMPANY)
  sell_type: String @join__field(graph: COMPANY)
  slug: String @join__field(graph: COMPANY) @join__field(graph: PLAN)
  ecommerce_description: String @join__field(graph: COMPANY)
  theme: JSON @join__field(graph: COMPANY) @join__field(graph: PLAN)
  onboarding: JSON @join__field(graph: COMPANY)
  published: Boolean @join__field(graph: COMPANY)
  media: [CompanyMedia] @join__field(graph: COMPANY) @join__field(graph: PLAN)
  shipping_zone: [ShippingZone] @join__field(graph: COMPANY)
}

input CompanyCreateInput
  @join__type(graph: COMPANY)
{
  name: String!
  country: String
  phone_country_code: String
  phone_number: String
  about_us: String
  currency: String
  vat: String
  vat_percent: String
  taly_percent: Float
  order_email: String
  type: role_company_type
  foreign_ids: JSON
  headquarter_country: String
  website: String
  industries: String
  sell_type: String
  slug: String
  ecommerce_description: String
  theme: JSON
  published: Boolean
  media: [CompanyMediaInput]
}

type CompanyMedia
  @join__type(graph: COMPANY, key: "id")
  @join__type(graph: PLAN, key: "id")
{
  id: BigInt
  media: SignedUrl
  type: role_company_media_type
  company_id: BigInt @join__field(graph: COMPANY)
}

input CompanyMediaInput
  @join__type(graph: COMPANY)
{
  media: String!
  type: role_company_media_type!
  company_id: BigInt!
}

input CompanyMediaUpdate
  @join__type(graph: COMPANY)
{
  media: String
  type: role_company_media_type
}

input CompanyUpdateInput
  @join__type(graph: COMPANY)
{
  name: String
  country: String
  phone_country_code: String
  phone_number: String
  about_us: String
  currency: String
  vat: String
  vat_percent: String
  taly_percent: Float
  order_email: String
  type: role_company_type
  foreign_ids: JSON
  headquarter_country: String
  website: String
  industries: String
  sell_type: String
  slug: String
  ecommerce_description: String
  theme: JSON
  published: Boolean
  media: [CompanyMediaUpdate]
}

enum Connection
  @join__type(graph: PAYMENT)
{
  STRIPE @join__enumValue(graph: PAYMENT)
  SQUARE @join__enumValue(graph: PAYMENT)
}

type ContractUpdateResponse
  @join__type(graph: SUBSCRIPTION)
{
  success: Boolean
  error: String
}

type Coupon
  @join__type(graph: PAYMENT)
{
  id: BigInt
  name: String!
  duration: CouponDurationType
  renew_duration: Int
  amount_off: Float
  percent_off: Float
  currency: String
  applies_to: JSON
}

type CouponDiscount
  @join__type(graph: PAYMENT)
{
  coupon_name: String
  amount_off: Float
  percent_off: Float
  currency: String
  total_discount: Float
}

enum CouponDurationType
  @join__type(graph: PAYMENT)
{
  ONCE @join__enumValue(graph: PAYMENT)
  FOREVER @join__enumValue(graph: PAYMENT)
  REPEATING @join__enumValue(graph: PAYMENT)
}

input CreateCouponInput
  @join__type(graph: PAYMENT)
{
  name: String!
  duration: CouponDurationType
  renew_duration: Int
  amount_off: Float
  percent_off: Float
  currency: String
  applies_to: JSON
}

input CreateEcommercePlanFeatureInput
  @join__type(graph: ECOMMERCE)
{
  plan_id: BigInt
  feature: JSON
}

input CreateEcommercePlanInput
  @join__type(graph: ECOMMERCE)
{
  company_id: BigInt
  title: String!
  description: String
  delivery_details: String
  allow_delivery_preference: Boolean
  media_cover: String
  plan_type: plan_type_ecommerce
  pricing_type: pricing_type_ecommerce
  terms: String
  voucher: Boolean
  recurring: JSON
  duration_value: Int
  duration_type: duration_type_ecommerce
  products: [CreateEcommerceProductInput]
  features: [CreateEcommercePlanFeatureInput]
  prices: [CreateEcommercePlanPriceInput]
}

input CreateEcommercePlanPriceInput
  @join__type(graph: ECOMMERCE)
{
  plan_id: BigInt
  country: String
  currency: String
  amount: Float
}

input CreateEcommerceProductInput
  @join__type(graph: ECOMMERCE)
{
  company_id: BigInt!
  name: String!
  description: String
  brand: String
  unit: String
  subunit: String
  subunit_amount: Int
  foreign_ids: JSON
  media: [CreateEcommerceProductMediaInput]
  product_variant: [CreateEcommerceProductVariantInput]
}

input CreateEcommerceProductMediaInput
  @join__type(graph: ECOMMERCE)
{
  product_id: BigInt!
  media: JSON
}

input CreateEcommerceProductVariantInput
  @join__type(graph: ECOMMERCE)
{
  product_id: BigInt!
  name: String!
  description: String
  sku: String
  volume_or_weight: String
  nutritional_facts: String
  ingredients: String
  allergens: String
  age_restricted: Boolean
  age: Int
  in_stock: Boolean
  foreign_ids: JSON
  product_variant_price: [CreateEcommerceProductVariantPriceInput]
}

input CreateEcommerceProductVariantPriceInput
  @join__type(graph: ECOMMERCE)
{
  product_variant_id: BigInt!
  country: String
  currency: String
  amount: Float
}

input CreateInnerProductInput
  @join__type(graph: PRODUCT)
{
  company_id: BigInt!
  name: String!
  description: String
  brand: String
  product_media: [MediaInputDefinition]
  unit: String
  unit_plural: String
  breakdown: String
  foreign_ids: JSON
  product_variant: [ProductVariantInput!]
}

input CreateInvoiceInput
  @join__type(graph: PAYMENT)
{
  user_id: BigInt!
  currency: String!
  invoice_items: [BigInt!]!
}

input CreateInvoiceItemInput
  @join__type(graph: PAYMENT)
{
  id: BigInt!
  invoice_id: BigInt!
  quantity: Float!
  price: Float!
}

input CreatePaymentIntent
  @join__type(graph: PAYMENT)
{
  invoice_id: String!
}

input CreatePayoutInput
  @join__type(graph: PAYMENT)
{
  vendor_id: BigInt!
  amount: Float!
  type: String!
}

input CreatePlanBulkInput
  @join__type(graph: PLAN)
{
  company_id: BigInt!
  delivery_details: String
  allow_delivery_preference: Boolean
  recurring: JSON
  category_id: BigInt!
  recurrent_discount_percent: Float
  allow_once_payment: Boolean
  plan_type: plan_type!
  products: [PlanProductArgInput!]!
  user_sales_limit: Int
  total_sales_limit: Int
  status: plan_status
}

input CreatePlanInput
  @join__type(graph: PLAN)
{
  title: String!
  company_id: BigInt!
  foreign_ids: JSON
  description: String
  delivery_details: String
  terms: String
  allow_delivery_preference: Boolean
  voucher: Boolean
  recurring: JSON
  duration_value: Int
  duration_type: duration_type
  category_id: BigInt!
  media_cover: [PlanMediaInputDefinition]!
  status: plan_status
  tag: JSON
  recurrent_discount_percent: Float
  allow_once_payment: Boolean
  pricing_type: pricing_type
  plan_type: plan_type!
  bundle_definition: AddBundleDefinitionFeatureInput
  plan_price: [PriceInput]
  user_sales_limit: Int
  total_sales_limit: Int
  products: [PlanProductArgInput!]!
}

input CreateSubscriptionInput
  @join__type(graph: SUBSCRIPTION)
{
  user_id: BigInt!
  plan_id: BigInt!
  country: String!
  currency: String!
  purchase_type: purchase_type!
  recurring: recurring_type
  products: [ProductSubscriptionArgInput]
}

type DatafileResponse
  @join__type(graph: ECOMMERCE)
{
  status: String
  message: String
}

scalar DateTime
  @join__type(graph: ECOMMERCE)
  @join__type(graph: COMPANY)
  @join__type(graph: PAYMENT)
  @join__type(graph: PLAN)
  @join__type(graph: PRODUCT)
  @join__type(graph: SUBSCRIPTION)
  @join__type(graph: UPLOAD)
  @join__type(graph: USER)

type DeliveryCharge
  @join__type(graph: PAYMENT)
{
  company_id: BigInt
  name: String
  amount: Float
}

type Doc
  @join__type(graph: PLAN)
{
  page: Int!
  size: Int!
  totalPages: Int!
}

enum duration_type
  @join__type(graph: PLAN)
{
  DAY @join__enumValue(graph: PLAN)
  WEEK @join__enumValue(graph: PLAN)
  MONTH @join__enumValue(graph: PLAN)
  YEAR @join__enumValue(graph: PLAN)
}

enum duration_type_ecommerce
  @join__type(graph: ECOMMERCE)
{
  DAY @join__enumValue(graph: ECOMMERCE)
  WEEK @join__enumValue(graph: ECOMMERCE)
  MONTH @join__enumValue(graph: ECOMMERCE)
  YEAR @join__enumValue(graph: ECOMMERCE)
}

enum ecommerce_enum
  @join__type(graph: ECOMMERCE)
{
  SHOPIFY @join__enumValue(graph: ECOMMERCE)
  WOO @join__enumValue(graph: ECOMMERCE)
}

enum ecommerce_order_line_type
  @join__type(graph: ECOMMERCE)
{
  SUBSCRIPTION @join__enumValue(graph: ECOMMERCE)
  PRODUCT @join__enumValue(graph: ECOMMERCE)
  DELIVERY @join__enumValue(graph: ECOMMERCE)
  DISCOUNT @join__enumValue(graph: ECOMMERCE)
}

type EcommerceCompany
  @join__type(graph: ECOMMERCE, key: "id")
{
  id: BigInt!
  name: String!
  country: String!
  phone_country_code: String
  phone_number: String
  about_us: String
  vat: String
  vat_percent: String
  order_email: String
  type: role_company_type
  foreign_ids: JSON
}

type EcommerceOrder
  @join__type(graph: ECOMMERCE)
{
  id: BigInt
  status: String
  foreign_ids: JSON
}

input EcommerceOrderInput
  @join__type(graph: ECOMMERCE)
{
  id: BigInt
  currency: String
  total_discount: Float
  total_price: Float
  foreign_ids: JSON
  order_line: [EcommerceOrderLineInput]
  address: EcommerceOrderShippingAddressInput
  user: EcommerceOrderUserInput
}

input EcommerceOrderLineInput
  @join__type(graph: ECOMMERCE)
{
  description: String
  part_of: String
  quantity: Int
  product_variant: EcommerceOrderLineProductVariantInput
  type: ecommerce_order_line_type
  line_price: Float
}

input EcommerceOrderLineProductInput
  @join__type(graph: ECOMMERCE)
{
  name: String
  brand: String
  foreign_ids: JSON
}

input EcommerceOrderLineProductVariantInput
  @join__type(graph: ECOMMERCE)
{
  name: String
  sku: String
  foreign_ids: JSON
  product_variant_price: [EcommerceOrderLineProductVariantPriceInput]
  product: EcommerceOrderLineProductInput
}

input EcommerceOrderLineProductVariantPriceInput
  @join__type(graph: ECOMMERCE)
{
  product_variant_id: BigInt
  country: String
  currency: String
  amount: Float
}

input EcommerceOrderShippingAddressInput
  @join__type(graph: ECOMMERCE)
{
  first_name: String
  last_name: String
  phone_country_code: String
  phone_number: String
  address_line_1: String
  address_line_2: String
  state: String
  city: String
  postal_code: String
  country: String
}

input EcommerceOrderUserInput
  @join__type(graph: ECOMMERCE)
{
  email: String
  first_name: String
  last_name: String
  phone_country_code: String
  phone_number: String
}

type EcommercePlan
  @join__type(graph: ECOMMERCE, key: "id", resolvable: false)
{
  id: BigInt!
  company_id: BigInt
  title: String!
  description: String
  delivery_details: String
  allow_delivery_preference: Boolean
  media_cover: String
  plan_type: plan_type_ecommerce
  pricing_type: pricing_type_ecommerce
  terms: String
  voucher: Boolean
  recurring: JSON
  duration_value: Int
  duration_type: duration_type_ecommerce
  products: [EcommerceProduct]
  features: [EcommercePlanFeature]
  prices: [EcommercePlanPrice]
}

type EcommercePlanFeature
  @join__type(graph: ECOMMERCE, key: "id")
{
  id: BigInt!
  plan_id: BigInt
  feature: JSON
}

type EcommercePlanPrice
  @join__type(graph: ECOMMERCE, key: "id")
{
  id: BigInt!
  plan_id: BigInt
  country: String
  currency: String
  amount: Float
}

type EcommercePlanProductPrice
  @join__type(graph: ECOMMERCE, key: "id")
{
  id: BigInt!
  plan_product_id: BigInt!
  country: String
  currency: String
  amount: Float
}

type EcommerceProduct
  @join__type(graph: ECOMMERCE, key: "id")
{
  id: BigInt
  company_id: BigInt
  name: String!
  description: String
  brand: String
  unit: String
  subunit: String
  subunit_amount: Int
  foreign_ids: JSON
  media: [EcommerceProductMedia]
  product_variant: [EcommerceProductVariant]
  extra: JSON
}

type EcommerceProductMedia
  @join__type(graph: ECOMMERCE, key: "id")
{
  id: BigInt
  product_id: BigInt
  media: JSON
  foreign_ids: JSON
}

type EcommerceProductVariant
  @join__type(graph: ECOMMERCE, key: "id")
{
  id: BigInt
  product_id: BigInt
  name: String!
  description: String
  sku: String
  volume_or_weight: String
  nutritional_facts: String
  ingredients: String
  allergens: String
  age_restricted: Boolean
  age: Int
  in_stock: Boolean
  foreign_ids: JSON
  product: EcommerceProduct
  product_variant_price: [EcommerceProductVariantPrice]
  extra: JSON
}

type EcommerceProductVariantPrice
  @join__type(graph: ECOMMERCE, key: "id")
{
  id: BigInt
  product_variant_id: BigInt
  country: String
  currency: String
  amount: Float
}

input EditCartSubscriptionInput
  @join__type(graph: SUBSCRIPTION)
{
  subscription_id: BigInt!
  purchase_type: purchase_type!
  recurring: recurring_type
  products: [ProductSubscriptionArgInput]
}

type ErrorResponse
  @join__type(graph: PLAN)
{
  id: BigInt
  error: String
}

enum Fit
  @join__type(graph: PRODUCT)
{
  CONTAIN @join__enumValue(graph: PRODUCT)
  COVER @join__enumValue(graph: PRODUCT)
}

type Impact
  @join__type(graph: USER, key: "id")
{
  id: ID!
  user_id: ID
  company_id: ID
  click_id: String
  subscription_id: ID
}

input ImpactInput
  @join__type(graph: USER)
{
  plans: [BigInt]!
  date: String!
  click_id: String!
}

type ImpactResponse
  @join__type(graph: USER)
{
  success: Boolean
}

type Invoice
  @join__type(graph: PAYMENT, key: "id")
{
  id: BigInt!
  invoice_items: [InvoiceItem]!
  user_id: BigInt
  user: User
  status: String
  payment_intent: String
  currency: String
  total_amount: Float
}

type InvoiceItem
  @join__type(graph: PAYMENT, key: "id")
  @join__type(graph: PLAN, key: "id")
  @join__type(graph: SUBSCRIPTION, key: "id")
{
  id: BigInt!
  invoice_id: BigInt @join__field(graph: PAYMENT)
  description: String @join__field(graph: PAYMENT)
  quantity: Float @join__field(graph: PAYMENT)
  price: Float @join__field(graph: PAYMENT)
  subscription_id: BigInt @join__field(graph: PAYMENT)
  company_id: BigInt @join__field(graph: PAYMENT)
  subscription: BoxSubscription @join__field(graph: PAYMENT)
  company: Company @join__field(graph: PAYMENT)
  type: InvoiceItemType @join__field(graph: PAYMENT)
}

enum InvoiceItemType
  @join__type(graph: PAYMENT)
{
  SUBSCRIPTION @join__enumValue(graph: PAYMENT)
  DELIVERY @join__enumValue(graph: PAYMENT)
  DISCOUNT @join__enumValue(graph: PAYMENT)
}

scalar join__FieldSet

enum join__Graph {
  ECOMMERCE @join__graph(name: "ECommerce", url: "https://jmf033wb80.execute-api.eu-west-2.amazonaws.com/staging/ecomm/graphql")
  COMPANY @join__graph(name: "company", url: "https://jmf033wb80.execute-api.eu-west-2.amazonaws.com/staging/company/graphql")
  PAYMENT @join__graph(name: "payment", url: "https://jmf033wb80.execute-api.eu-west-2.amazonaws.com/staging/pmt/graphql")
  PLAN @join__graph(name: "plan", url: "https://jmf033wb80.execute-api.eu-west-2.amazonaws.com/staging/plan/graphql")
  PRODUCT @join__graph(name: "product", url: "https://jmf033wb80.execute-api.eu-west-2.amazonaws.com/staging/product/graphql")
  SUBSCRIPTION @join__graph(name: "subscription", url: "https://jmf033wb80.execute-api.eu-west-2.amazonaws.com/staging/subscription/graphql")
  UPLOAD @join__graph(name: "upload", url: "https://jmf033wb80.execute-api.eu-west-2.amazonaws.com/staging/upload/graphql")
  USER @join__graph(name: "user", url: "https://jmf033wb80.execute-api.eu-west-2.amazonaws.com/staging/usr/graphql")
}

scalar JSON
  @join__type(graph: ECOMMERCE)
  @join__type(graph: COMPANY)
  @join__type(graph: PAYMENT)
  @join__type(graph: PLAN)
  @join__type(graph: PRODUCT)
  @join__type(graph: SUBSCRIPTION)
  @join__type(graph: UPLOAD)
  @join__type(graph: USER)

scalar JsonObject
  @join__type(graph: ECOMMERCE)
  @join__type(graph: PAYMENT)
  @join__type(graph: PLAN)
  @join__type(graph: PRODUCT)
  @join__type(graph: USER)

enum KindEnum
  @join__type(graph: COMPANY)
  @join__type(graph: SUBSCRIPTION)
{
  SEND @join__enumValue(graph: COMPANY) @join__enumValue(graph: SUBSCRIPTION)
  VERIFY @join__enumValue(graph: COMPANY) @join__enumValue(graph: SUBSCRIPTION)
}

input KlavyioInput
  @join__type(graph: USER)
{
  email: String!
  source: String!
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type ListRule
  @join__type(graph: COMPANY)
{
  type: RuleType
  field: RuleField
  values: [String]
  deliver: Boolean
}

input MediaCoverInput
  @join__type(graph: PLAN)
{
  key: String
  fit: PlanMediaCoverFit
}

type MediaCoverPlan
  @join__type(graph: PLAN)
{
  key: String
  url: SignedUrl
  fit: PlanMediaCoverFit
}

type MediaDefinition
  @join__type(graph: PRODUCT)
{
  key: String
  url: SignedUrl
  fit: Fit
}

input MediaInputDefinition
  @join__type(graph: PRODUCT)
{
  id: BigInt
  key: String
  fit: Fit
}

type Message
  @join__type(graph: PAYMENT)
{
  success: Boolean
  error: String
}

type MessageKlavyio
  @join__type(graph: USER)
{
  message: String
  error: String
  success: Boolean
}

type MessagePlanPriceUpdate
  @join__type(graph: PLAN)
{
  success: Boolean
  errors: [ErrorResponse]
}

type MessageProcessPayout
  @join__type(graph: PAYMENT)
{
  success: Boolean
  errors: [ProcessPayoutErrorResponse]
}

type Mutation
  @join__type(graph: ECOMMERCE)
  @join__type(graph: COMPANY)
  @join__type(graph: PAYMENT)
  @join__type(graph: PLAN)
  @join__type(graph: PRODUCT)
  @join__type(graph: SUBSCRIPTION)
  @join__type(graph: USER)
{
  forceProductSync(companyId: BigInt!): Boolean @join__field(graph: ECOMMERCE)
  testWebhook(type: request_type!, apiId: String, shopifyId: String): Boolean @join__field(graph: ECOMMERCE)
  createEcommerceOrder(companyId: BigInt!, order: EcommerceOrderInput!): EcommerceOrder @join__field(graph: ECOMMERCE)
  createEcommerceOrders(companyId: BigInt!, orders: [EcommerceOrderInput]!): [EcommerceOrder] @join__field(graph: ECOMMERCE)
  createEcommercePlan(companyId: BigInt!, plan: CreateEcommercePlanInput!): EcommercePlan @join__field(graph: ECOMMERCE)
  updateEcommercePlan(companyId: BigInt!, plan: UpdateEcommercePlanInput!): EcommercePlan @join__field(graph: ECOMMERCE)
  deleteEcommercePlan(id: BigInt!): Boolean @join__field(graph: ECOMMERCE)
  createEcommerceProduct(companyId: BigInt!, product: CreateEcommerceProductInput!): EcommerceProduct @join__field(graph: ECOMMERCE)
  updateEcommerceProduct(companyId: BigInt!, product: UpdateEcommerceProductInput!): EcommerceProduct @join__field(graph: ECOMMERCE)
  deleteEcommerceProduct(id: BigInt!): Boolean @join__field(graph: ECOMMERCE)
  saveSyncSettings(id: BigInt, settings: [JSON]): [JSON] @join__field(graph: ECOMMERCE)
  createCompany(input: CompanyCreateInput!): Company @join__field(graph: COMPANY)
  updateCompany(id: BigInt!, input: CompanyUpdateInput!): Company @join__field(graph: COMPANY)
  deleteCompany(id: BigInt!): Company @join__field(graph: COMPANY)
  skipOnboardingStep(companyId: BigInt!, step: Int!): Boolean @join__field(graph: COMPANY)
  toggleIntegration(companyId: BigInt!, type: String!, provider: String): Boolean @join__field(graph: COMPANY)
  createCompanyMedia(input: CompanyMediaInput!): CompanyMedia @join__field(graph: COMPANY)
  updateCompanyMedia(id: BigInt!, input: CompanyMediaUpdate!): CompanyMedia @join__field(graph: COMPANY)
  deleteCompanyMedia(id: BigInt!): CompanyMedia @join__field(graph: COMPANY)
  createShippingZone(input: ShippingZoneCreateInput!): Boolean @join__field(graph: COMPANY)
  updateShippingZone(id: BigInt!, input: ShippingZoneUpdateInput): Boolean @join__field(graph: COMPANY)
  deleteShippingZone(id: BigInt!): Boolean @join__field(graph: COMPANY)
  createShippingZonePrice(input: ShippingZonePriceCreateInput!): Boolean @join__field(graph: COMPANY)
  updateShippingZonePrice(id: BigInt!, input: ShippingZonePriceUpdateInput): Boolean @join__field(graph: COMPANY)
  deleteShippingZonePrice(id: BigInt!): Boolean @join__field(graph: COMPANY)
  createShippingZoneRule(input: RuleCreateInput!): Boolean @join__field(graph: COMPANY)
  updateShippingZoneRule(id: BigInt!, input: RuleUpdateInput): Boolean @join__field(graph: COMPANY)
  deleteShippingZoneRule(id: BigInt!): Boolean @join__field(graph: COMPANY)
  createCoupon(input: CreateCouponInput!): Coupon @join__field(graph: PAYMENT)
  disableCoupon(id: BigInt!): Coupon @join__field(graph: PAYMENT)
  orderActions(input: OrderActionInput!): Order @join__field(graph: PAYMENT)
  createPaymentIntent(input: CreatePaymentIntent!): PaymentIntent @join__field(graph: PAYMENT)
  processCheckout(input: ProccessCheckoutInput!): PaymentIntent @join__field(graph: PAYMENT)
  connectedUser(input: AccountLinkInput!): AccountLink @join__field(graph: PAYMENT)
  createPaymentMethod: PaymentIntent @join__field(graph: PAYMENT)
  setDefaultPaymentMethod(payment_method_id: String): Boolean @join__field(graph: PAYMENT)
  processOffSession(subscriptions: [BigInt]): Boolean @join__field(graph: PAYMENT)
  disconnectUser(input: AccountDeletInput!): Boolean @join__field(graph: PAYMENT)
  processPayout(input: ProcessPayoutInput!): Message @join__field(graph: PAYMENT)
  processPayoutsDue: MessageProcessPayout @join__field(graph: PAYMENT)
  createCategory(name: String!, slug: String!, icon: String!): Category @join__field(graph: PLAN)
  updateCategory(id: BigInt!, name: String, slug: String, icon: String): Category @join__field(graph: PLAN)
  deleteCategory(id: BigInt!): Category @join__field(graph: PLAN)
  createPlan(input: CreatePlanInput): Plan @join__field(graph: PLAN)
  createPlanBulk(input: CreatePlanBulkInput): [Plan] @join__field(graph: PLAN)
  updatePlan(input: UpdatePlanInput): Plan @join__field(graph: PLAN)
  updatePlanPrices: MessagePlanPriceUpdate @join__field(graph: PLAN)
  deletePlan(id: BigInt!): Plan @join__field(graph: PLAN)
  createPlanFeature(plan_id: BigInt!, feature: JSON): PlanFeature @join__field(graph: PLAN)
  updatePlanFeature(id: BigInt!, feature: JSON): PlanFeature @join__field(graph: PLAN)
  createAddProductsFeature(plan_id: BigInt!, input: AddProductsFeatureInput!): PlanFeature @join__field(graph: PLAN)
  createAddDiscountFeature(plan_id: BigInt!, input: AddDiscountFeatureInput!): PlanFeature @join__field(graph: PLAN)
  createAddBundleDefinitionFeature(plan_id: BigInt, input: AddBundleDefinitionFeatureInput!): PlanFeature @join__field(graph: PLAN)
  deletePlanFeature(id: BigInt!): PlanFeature @join__field(graph: PLAN)
  createPlanPrice(plan_id: BigInt!, country: String!, currency: String!, amount: Float!): PlanPrice @join__field(graph: PLAN)
  updatePlanPrice(id: BigInt!, country: String!, currency: String!, amount: Float!): PlanPrice @join__field(graph: PLAN)
  deletePlanPrice(id: BigInt!): PlanPrice @join__field(graph: PLAN)
  createPlanProductVariant(plan_id: Int!, product_variant_id: Int!): Plan @join__field(graph: PLAN)
  deletePlanProductVariant(plan_id: Int!, product_variant_id: Int!): Plan @join__field(graph: PLAN)
  createPlanProductVariantPrice(plan_product_variant_id: BigInt!, country: String!, currency: String!, amount: Float!): PlanProductVariantPrice @join__field(graph: PLAN)
  updatePlanProductVariantPrice(id: BigInt!, country: String!, currency: String!, amount: Float!): PlanProductVariantPrice @join__field(graph: PLAN)
  deletePlanProductVariantPrice(id: BigInt!): PlanProductVariantPrice @join__field(graph: PLAN)
  createProduct(input: CreateInnerProductInput): Product @join__field(graph: PRODUCT)
  updateProduct(input: UpdateProductInput!): Product @join__field(graph: PRODUCT)
  deleteProduct(id: BigInt!): Product @join__field(graph: PRODUCT)
  createProductMedia(product_id: BigInt, product_variant_id: BigInt, media: MediaInputDefinition): ProductMedia @join__field(graph: PRODUCT)
  updateProductMedia(id: BigInt!, product_id: BigInt, product_variant_id: BigInt, media: MediaInputDefinition): ProductMedia @join__field(graph: PRODUCT)
  deleteProductMedia(id: BigInt!): ProductMedia @join__field(graph: PRODUCT)
  createProductVariant(product_id: BigInt!, name: String!, description: String, sku: String, description_long: String, volume_or_weight: String, product_media_id: BigInt, nutritional_facts: String, ingredients: String, allergens: String, age_restricted: Boolean, age: Int, in_stock: Boolean, foreign_ids: JSON): ProductVariant @join__field(graph: PRODUCT)
  updateProductVariant(id: BigInt!, product_id: BigInt!, name: String!, description: String, sku: String, description_long: String, volume_or_weight: String, product_media_id: BigInt, nutritional_facts: String, ingredients: String, allergens: String, age_restricted: Boolean, age: Int, in_stock: Boolean, foreign_ids: JSON): ProductVariant @join__field(graph: PRODUCT)
  deleteProductVariant(id: Int!): ProductVariant @join__field(graph: PRODUCT)
  createProductVariantPrice(product_variant_id: BigInt!, country: String, currency: String, amount: Float): ProductVariantPrice @join__field(graph: PRODUCT)
  updateProductVariantPrice(id: Int!, product_variant_id: BigInt!, country: String, currency: String, amount: Float): ProductVariantPrice @join__field(graph: PRODUCT)
  deleteProductVariantPrice(id: Int!): ProductVariantPrice @join__field(graph: PRODUCT)
  applyCoupon(coupon_code: String!): Cart @join__field(graph: SUBSCRIPTION)
  removeCoupon: Cart @join__field(graph: SUBSCRIPTION)
  createSubscription(input: [CreateSubscriptionInput!]!): Cart @join__field(graph: SUBSCRIPTION)
  updateSubscription(id: BigInt!, user_id: BigInt, plan_id: BigInt, foreign_ids: JSON, status: status_type, recurring: recurring_type, address_id: BigInt, delivery_day: String, coupon_code: String, coupon_duration: String, cancelled_at: DateTime): BoxSubscription @join__field(graph: SUBSCRIPTION)
  deleteSubscription(id: BigInt!): Cart @join__field(graph: SUBSCRIPTION)
  cancelSubscription(subscriptions: [BigInt]!): [BoxSubscription] @join__field(graph: SUBSCRIPTION)
  editCartSubscription(input: EditCartSubscriptionInput): Cart @join__field(graph: SUBSCRIPTION)
  updateSubscriptionContractAmount(ids: [BigInt]!): ContractUpdateResponse @join__field(graph: SUBSCRIPTION)
  requestUpdateSubscriptionContractAmount(ids: [BigInt]!): ContractUpdateResponse @join__field(graph: SUBSCRIPTION)
  setContractUpdateRequestDate(ids: [BigInt]!): ContractUpdateResponse @join__field(graph: SUBSCRIPTION)
  createSubscriptionPlanProductVariant(subscription_id: BigInt!, plan_product_variant_id: BigInt!, quantity: Int!): SubscriptionPlanProductVariant @join__field(graph: SUBSCRIPTION)
  updateSubscriptionPlanProductVariant(id: BigInt!, subscription_id: BigInt!, plan_product_variant_id: BigInt!): SubscriptionPlanProductVariant @join__field(graph: SUBSCRIPTION)
  deleteSubscriptionPlanProductVariant(id: BigInt!): SubscriptionPlanProductVariant @join__field(graph: SUBSCRIPTION)
  createAddress(user_id: BigInt!, first_name: String!, last_name: String!, phone_country_code: String!, phone_number: String!, address_line_1: String!, address_line_2: String, state: String, city: String!, postal_code: String!, country: String!, is_default: Boolean, type: address_type): Address @join__field(graph: USER)
  updateAddress(id: BigInt!, user_id: BigInt, first_name: String!, last_name: String!, phone_country_code: String!, phone_number: String!, address_line_1: String!, address_line_2: String, state: String, city: String!, postal_code: String!, country: String!, is_default: Boolean, type: address_type, deleted: Boolean): Address @join__field(graph: USER)
  deleteAddress(id: BigInt!): Address @join__field(graph: USER)
  manageClickIds(data: [ImpactInput!]!, user_id: BigInt!): ImpactResponse @join__field(graph: USER)
  createUser(input: UserInput!): User @join__field(graph: USER)
  updateUser(id: BigInt!, input: UserUpdateInput!): User @join__field(graph: USER)
  deleteUser(id: BigInt!): User @join__field(graph: USER)
  subscribeToKlavyio(input: KlavyioInput!): MessageKlavyio @join__field(graph: USER)
  updateClickId(input: UpdateClickIdInput!): MessageKlavyio @join__field(graph: USER)
}

type NewPlanSection
  @join__type(graph: PLAN)
{
  title: String!
  type: String!
  items: [Plan]
}

type NewPlanSectionListResponse
  @join__type(graph: PLAN)
{
  section: NewPlanSection!
  doc: Doc!
}

type Order
  @join__type(graph: PAYMENT, key: "id")
  @join__type(graph: SUBSCRIPTION, key: "id")
{
  id: BigInt!
  currency: String! @join__field(graph: PAYMENT)
  total_discount: Float @join__field(graph: PAYMENT)
  company_id: BigInt @join__field(graph: PAYMENT)
  total_price: Float! @join__field(graph: PAYMENT)
  customer: User! @join__field(graph: PAYMENT)
  order_line: [OrderLine!] @join__field(graph: PAYMENT)
  status: String @join__field(graph: PAYMENT)
  foreign_ids: JSON @join__field(graph: PAYMENT)
  plan: [Plan] @join__field(graph: PAYMENT)
  created_at: DateTime @join__field(graph: PAYMENT)
  next_action: order_status @join__field(graph: PAYMENT)
  order_subscription: [OrderSubscription] @join__field(graph: PAYMENT)
}

enum order_line_type
  @join__type(graph: PAYMENT)
{
  SUBSCRIPTION @join__enumValue(graph: PAYMENT)
  PRODUCT @join__enumValue(graph: PAYMENT)
  DELIVERY @join__enumValue(graph: PAYMENT)
  DISCOUNT @join__enumValue(graph: PAYMENT)
}

enum order_status
  @join__type(graph: PAYMENT)
{
  PENDING @join__enumValue(graph: PAYMENT)
  SCHEDULE @join__enumValue(graph: PAYMENT)
  FULFILLED @join__enumValue(graph: PAYMENT)
  ON_HOLD @join__enumValue(graph: PAYMENT)
  COMPLETED @join__enumValue(graph: PAYMENT)
  CANCELLED @join__enumValue(graph: PAYMENT)
}

input OrderActionInput
  @join__type(graph: PAYMENT)
{
  action: order_status!
  id: BigInt!
}

type OrderLine
  @join__type(graph: PAYMENT)
{
  description: String
  part_of: String
  quantity: Int!
  product_variant: ProductVariant
  type: String
  price: Float
}

type OrderList
  @join__type(graph: PAYMENT)
{
  data: [Order!]!
  pagination: PaginationInfo!
}

input OrderQuery
  @join__type(graph: PAYMENT)
{
  year: Int
  month: Int
  week: Int
  page: Int
  size: Int
  timeFrame: TimeFrame
  company_id: BigInt
  isNew: Boolean
  consumerName: String
  promotionalCode: String
  orderId: BigInt
}

type OrderResponse
  @join__type(graph: PAYMENT)
{
  orders_summary: OrderSummary!
  orders_list: OrderList!
}

type OrderStats
  @join__type(graph: PAYMENT)
{
  count: Int!
  percentage_change_from_last_month: Float!
}

type OrderSubscription
  @join__type(graph: PAYMENT, key: "id")
  @join__type(graph: SUBSCRIPTION, key: "id")
{
  id: BigInt!
  order_id: BigInt @join__field(graph: PAYMENT)
  subscription_id: BigInt @join__field(graph: PAYMENT)
  order: Order @join__field(graph: PAYMENT)
  subscription: BoxSubscription @join__field(graph: PAYMENT)
}

type OrderSummary
  @join__type(graph: PAYMENT)
{
  total_orders: OrderStats!
  new_orders: OrderStats!
}

type Pagination
  @join__type(graph: PAYMENT)
{
  page: Int!
  size: Int!
}

type PaginationInfo
  @join__type(graph: PAYMENT)
{
  current_page: Int!
  total_pages: Int!
  per_page: Int!
}

type PaymentIntent
  @join__type(graph: PAYMENT)
{
  id: String
  clientSecret: String
}

type PaymentMethod
  @join__type(graph: PAYMENT, key: "id")
  @join__type(graph: USER, key: "id")
{
  id: ID!
  userId: Int! @join__field(graph: USER)
  paymentType: String @join__field(graph: USER)
  cardBrand: String @join__field(graph: USER)
  cardLastFour: String @join__field(graph: USER)
  expMonth: Int @join__field(graph: USER)
  expYear: Int @join__field(graph: USER)
  paymentMethodId: String @join__field(graph: USER)
  isDefault: Boolean @join__field(graph: USER)
  deletedAt: String @join__field(graph: USER)
  createdAt: String @join__field(graph: USER)
  updatedAt: String @join__field(graph: USER)
}

type Payout
  @join__type(graph: PAYMENT)
{
  id: BigInt!
  company_id: BigInt!
  order_id: BigInt!
  amount: Float!
  currency: String!
  status: payout_status!
  scheduled_date: DateTime!
  payment_method_id: BigInt
  payment_method: PaymentMethod
  company: Company
  order: Order
}

enum payout_status
  @join__type(graph: PAYMENT)
{
  PENDING @join__enumValue(graph: PAYMENT)
  PROCESSED @join__enumValue(graph: PAYMENT)
  ERROR @join__enumValue(graph: PAYMENT)
}

type PayoutWorkflow
  @join__type(graph: PAYMENT)
{
  data: [Payout!]!
  doc: Pagination
}

type Plan
  @join__type(graph: PAYMENT, key: "id")
  @join__type(graph: PLAN, key: "id")
  @join__type(graph: SUBSCRIPTION, key: "id")
{
  id: BigInt!
  company_id: BigInt @join__field(graph: PLAN)
  slug: String @join__field(graph: PLAN)
  title: String @join__field(graph: PLAN)
  description: String @join__field(graph: PLAN)
  delivery_details: String @join__field(graph: PLAN)
  allow_delivery_preference: Boolean @join__field(graph: PLAN)
  media_cover: [PlanMediaCoverDefinition] @join__field(graph: PLAN)
  terms: String @join__field(graph: PLAN)
  voucher: Boolean @join__field(graph: PLAN)
  recurring: JSON @join__field(graph: PLAN)
  duration_value: Int @join__field(graph: PLAN)
  duration_type: duration_type @join__field(graph: PLAN)
  plan_type: plan_type @join__field(graph: PLAN)
  pricing_type: pricing_type @join__field(graph: PLAN)
  status: plan_status @join__field(graph: PLAN)
  tag: JSON @join__field(graph: PLAN)
  category: Category @join__field(graph: PLAN)
  products: [PlanProductVariant] @join__field(graph: PLAN)
  features: [PlanFeature] @join__field(graph: PLAN)
  prices: [PlanPrice] @join__field(graph: PLAN)
  company: Company @join__field(graph: PLAN)
  recurrent_discount_percent: Float @join__field(graph: PLAN)
  allow_once_payment: Boolean @join__field(graph: PLAN)
  user_sales_limit: Int @join__field(graph: PLAN)
  total_sales_limit: Int @join__field(graph: PLAN)
  sold_out: Boolean @join__field(graph: PLAN)
  total_sales: Int @join__field(graph: PLAN)
  user_purchases: Int @join__field(graph: PLAN)
  bundle_definition: [BundleDefinitionGroup] @join__field(graph: PLAN)
}

enum plan_status
  @join__type(graph: PLAN)
{
  DRAFT @join__enumValue(graph: PLAN)
  ACTIVE @join__enumValue(graph: PLAN)
  INACTIVE @join__enumValue(graph: PLAN)
}

enum plan_type
  @join__type(graph: PLAN)
  @join__type(graph: SUBSCRIPTION)
{
  BUILD_A_BOX @join__enumValue(graph: PLAN) @join__enumValue(graph: SUBSCRIPTION)
  BUNDLE @join__enumValue(graph: PLAN) @join__enumValue(graph: SUBSCRIPTION)
  TRIAL @join__enumValue(graph: PLAN) @join__enumValue(graph: SUBSCRIPTION)
  START_REFILL @join__enumValue(graph: PLAN) @join__enumValue(graph: SUBSCRIPTION)
  STANDARD @join__enumValue(graph: PLAN) @join__enumValue(graph: SUBSCRIPTION)
}

enum plan_type_ecommerce
  @join__type(graph: ECOMMERCE)
{
  FIXED @join__enumValue(graph: ECOMMERCE)
  DYNAMIC @join__enumValue(graph: ECOMMERCE)
}

type PlanFeature
  @join__type(graph: PLAN, key: "id")
{
  id: BigInt!
  plan_id: BigInt
  feature: JSON
}

input PlanFeatureMessage
  @join__type(graph: PLAN)
{
  message: String
  provider: ProviderFeatureType
}

input PlanFilters
  @join__type(graph: PLAN)
{
  variant_ids: [Int]!
}

type PlanMediaCoverDefinition
  @join__type(graph: PLAN)
{
  selected: Boolean
  media: MediaCoverPlan
}

enum PlanMediaCoverFit
  @join__type(graph: PLAN)
{
  CONTAIN @join__enumValue(graph: PLAN)
  COVER @join__enumValue(graph: PLAN)
}

input PlanMediaInputDefinition
  @join__type(graph: PLAN)
{
  selected: Boolean
  media: MediaCoverInput
}

type PlanPrice
  @join__type(graph: PLAN, key: "id")
{
  id: BigInt!
  plan_id: BigInt
  country: String
  currency: String
  amount: Float
  amount_with_discount: Float
}

input PlanProductArgInput
  @join__type(graph: PLAN)
{
  id: BigInt!
  quantity: Int!
}

type PlanProductVariant
  @join__type(graph: PLAN, key: "id")
  @join__type(graph: SUBSCRIPTION, key: "id")
{
  id: BigInt!
  name: String @join__field(graph: PLAN)
  description: String @join__field(graph: PLAN)
  sku: String @join__field(graph: PLAN)
  media: [ProductMedia] @join__field(graph: PLAN)
  quantity: Int @join__field(graph: PLAN)
  plan_id: BigInt! @join__field(graph: PLAN)
  product_variant_id: BigInt! @join__field(graph: PLAN)
  foreign_ids: JSON @join__field(graph: PLAN)
  subscriptions_plans_products_variants: [SubscriptionPlanProductVariant] @join__field(graph: PLAN)
  invoice_item: [InvoiceItem] @join__field(graph: PLAN)
  productPrice: [PlanProductVariantPrice] @join__field(graph: PLAN)
  product_variant: ProductVariant @join__field(graph: PLAN)
}

type PlanProductVariantPrice
  @join__type(graph: PLAN, key: "id")
{
  id: BigInt!
  plan_product_variant_id: BigInt!
  country: String
  currency: String
  amount: Float
  amount_with_discount: Float
}

type PlanSection
  @join__type(graph: PLAN)
{
  title: String!
  type: String!
  items: [SectionItem]
}

type PlanSectionListResponse
  @join__type(graph: PLAN)
{
  sections: [PlanSection!]!
  doc: Doc!
}

enum PlanSectionType
  @join__type(graph: PLAN)
{
  TOP_PICK @join__enumValue(graph: PLAN)
  NEW_ON_TALY @join__enumValue(graph: PLAN)
}

input PriceInput
  @join__type(graph: PLAN)
{
  id: BigInt
  country: String!
  currency: String!
  amount: Float!
}

enum pricing_type
  @join__type(graph: PLAN)
{
  FIXED @join__enumValue(graph: PLAN)
  DYNAMIC @join__enumValue(graph: PLAN)
}

enum pricing_type_ecommerce
  @join__type(graph: ECOMMERCE)
{
  FIXED @join__enumValue(graph: ECOMMERCE)
  DYNAMIC @join__enumValue(graph: ECOMMERCE)
}

input ProccessCheckoutInput
  @join__type(graph: PAYMENT)
{
  cart_id: BigInt!
  currency: String!
  address_id: BigInt!
  coupon_id: BigInt
}

type ProcessPayoutErrorResponse
  @join__type(graph: PAYMENT)
{
  id: BigInt
  error: String
}

input ProcessPayoutInput
  @join__type(graph: PAYMENT)
{
  payout_id: BigInt!
}

type Product
  @join__type(graph: PRODUCT, key: "id")
{
  id: BigInt!
  company_id: BigInt!
  name: String!
  description: String
  brand: String
  product_media_id: BigInt
  unit: String
  unit_plural: String
  breakdown: String
  foreign_ids: JSON
  actor: BigInt
  media: [ProductMedia]
  variants: [ProductVariant]
  hasPlan: Boolean
  status: ProductStatus
}

enum product_selection
  @join__type(graph: PLAN)
{
  FIXED @join__enumValue(graph: PLAN)
  DYNAMIC @join__enumValue(graph: PLAN)
}

input ProductFeature
  @join__type(graph: PLAN)
{
  plan_product_variant_id: BigInt!
  country: String
  price: Float
}

type ProductFieldsMap
  @join__type(graph: ECOMMERCE)
{
  source: String
  target: String
}

type ProductMedia
  @join__type(graph: PLAN, key: "id")
  @join__type(graph: PRODUCT, key: "id")
{
  id: BigInt!
  product_id: BigInt @join__field(graph: PRODUCT)
  product_variant_id: BigInt @join__field(graph: PRODUCT)
  media: MediaDefinition @join__field(graph: PRODUCT)
  actor: BigInt @join__field(graph: PRODUCT)
}

enum ProductStatus
  @join__type(graph: PRODUCT)
{
  INCOMPLETE @join__enumValue(graph: PRODUCT)
  READY @join__enumValue(graph: PRODUCT)
  ADDED_TO_SUBSCRIPTION @join__enumValue(graph: PRODUCT)
}

input ProductSubscriptionArgInput
  @join__type(graph: SUBSCRIPTION)
{
  id: BigInt!
  quantity: Int!
}

type ProductVariant
  @join__type(graph: PAYMENT, key: "id")
  @join__type(graph: PLAN, key: "id")
  @join__type(graph: PRODUCT, key: "id")
  @join__type(graph: SUBSCRIPTION, key: "id")
{
  id: BigInt!
  in_stock: Boolean @join__field(graph: PLAN) @join__field(graph: PRODUCT)
  product_id: BigInt! @join__field(graph: PRODUCT)
  name: String! @join__field(graph: PRODUCT)
  product_name: String @join__field(graph: PRODUCT)
  description: String @join__field(graph: PRODUCT)
  sku: String @join__field(graph: PRODUCT)
  description_long: String @join__field(graph: PRODUCT)
  volume_or_weight: String @join__field(graph: PRODUCT)
  media: [ProductMedia] @join__field(graph: PRODUCT)
  nutritional_facts: String @join__field(graph: PRODUCT)
  ingredients: String @join__field(graph: PRODUCT)
  allergens: String @join__field(graph: PRODUCT)
  age_restricted: Boolean @join__field(graph: PRODUCT)
  age: Int @join__field(graph: PRODUCT)
  foreign_ids: JSON @join__field(graph: PRODUCT)
  actor: BigInt @join__field(graph: PRODUCT)
  hasPlan: Boolean @join__field(graph: PRODUCT)
  prices: [ProductVariantPrice] @join__field(graph: PRODUCT)
}

input ProductVariantFilter
  @join__type(graph: PRODUCT)
{
  withoutPlan: Boolean
  deleted: Boolean
}

input ProductVariantInput
  @join__type(graph: PRODUCT)
{
  name: String!
  description: String
  description_long: String
  sku: String
  volume_or_weight: String
  product_variant_media: [MediaInputDefinition]
  nutritional_facts: String
  ingredients: String
  allergens: String
  age_restricted: Boolean
  age: Int
  in_stock: Boolean
  foreign_ids: JSON
  product_variant_price: [ProductVariantPriceInput]
}

type ProductVariantPrice
  @join__type(graph: PRODUCT, key: "id")
{
  id: BigInt!
  product_variant_id: BigInt!
  country: String
  currency: String
  amount: Float
  actor: BigInt
  created_at: DateTime
  updated_at: DateTime
}

input ProductVariantPriceInput
  @join__type(graph: PRODUCT)
{
  country: String
  currency: String
  amount: Float
  created_at: DateTime
  updated_at: DateTime
}

enum ProviderFeatureType
  @join__type(graph: PLAN)
{
  EMAIL @join__enumValue(graph: PLAN)
  SMS @join__enumValue(graph: PLAN)
}

enum purchase_type
  @join__type(graph: SUBSCRIPTION)
{
  RECURRING @join__enumValue(graph: SUBSCRIPTION)
  ONCE_OFF @join__enumValue(graph: SUBSCRIPTION)
}

type Query
  @join__type(graph: ECOMMERCE)
  @join__type(graph: COMPANY)
  @join__type(graph: PAYMENT)
  @join__type(graph: PLAN)
  @join__type(graph: PRODUCT)
  @join__type(graph: SUBSCRIPTION)
  @join__type(graph: UPLOAD)
  @join__type(graph: USER)
{
  getEcommerceCompany(companyId: BigInt!): EcommerceCompany @join__field(graph: ECOMMERCE)
  requestEcommerceDataFile(companyId: BigInt!): DatafileResponse @join__field(graph: ECOMMERCE)
  getOAuthURL(companyId: BigInt!, store: String!, ecommerce: ecommerce_enum!, callbackURL: String!): String @join__field(graph: ECOMMERCE)
  getAccessToken(companyId: BigInt!, store: String!, ecommerce: ecommerce_enum!, authCode: String!): Boolean @join__field(graph: ECOMMERCE)
  saveSecret(companyId: BigInt!, ecommerce: ecommerce_enum!, key: String!): Boolean @join__field(graph: ECOMMERCE)
  getEcommerceOrder(companyId: BigInt!, id: BigInt!): EcommerceOrder @join__field(graph: ECOMMERCE)
  getEcommerceOrderList(companyId: BigInt!, ids: [BigInt], updatedAt: DateTime): [EcommerceOrder] @join__field(graph: ECOMMERCE)
  getEcommercePlan(companyId: BigInt!, id: BigInt!): EcommercePlan @join__field(graph: ECOMMERCE)
  getEcommercePlanList(companyId: BigInt!): [EcommercePlan] @join__field(graph: ECOMMERCE)
  getEcommerceProduct(companyId: BigInt!, id: BigInt!): EcommerceProduct @join__field(graph: ECOMMERCE)
  getEcommerceProductList(companyId: BigInt!): [EcommerceProduct] @join__field(graph: ECOMMERCE)
  getSyncProductMapping(id: BigInt, provider: String): SyncProductFieldsMap @join__field(graph: ECOMMERCE)
  getSyncSettings(id: BigInt, provider: String): JSON @join__field(graph: ECOMMERCE)
  getCompany(id: BigInt, slug: String, industries: [String], published: Boolean): Company @join__field(graph: COMPANY)
  getCompanyList(industries: [String], published: Boolean, country: String, categories: [BigInt], page: Int, size: Int): [Company] @join__field(graph: COMPANY)
  getCompanyMedia(id: BigInt!): CompanyMedia @join__field(graph: COMPANY)
  getCompanyMediaList(input: CompanyMediaInput!): [CompanyMedia] @join__field(graph: COMPANY)
  getShippingZone(id: BigInt!): ShippingZone @join__field(graph: COMPANY)
  getShippingZoneList: [ShippingZone] @join__field(graph: COMPANY)
  getShippingZonePrice(id: BigInt!): ShippingZonePrice @join__field(graph: COMPANY)
  getShippingZonePriceList(shippingZoneId: BigInt, shippingZoneRuleId: BigInt): [ShippingZonePrice] @join__field(graph: COMPANY)
  getShippingZoneRule(id: BigInt!): Rule @join__field(graph: COMPANY)
  getShippingZoneRuleList(shippingZoneId: BigInt): [Rule] @join__field(graph: COMPANY)
  getCoupon(id: BigInt!): Coupon @join__field(graph: PAYMENT)
  getOrderList(input: OrderQuery!): OrderResponse! @join__field(graph: PAYMENT)
  getOrder(id: BigInt!): Order @join__field(graph: PAYMENT)
  getInvoice(id: BigInt, payment_intent: String): Invoice @join__field(graph: PAYMENT)
  getPaymentIntent(id: String!): PaymentIntent @join__field(graph: PAYMENT)
  getDeliveryCharge(address_id: BigInt!, cart_id: BigInt!): [DeliveryCharge] @join__field(graph: PAYMENT)
  getPayout(id: BigInt!): Payout @join__field(graph: PAYMENT)
  listPayouts(company_id: BigInt, page: Int!, size: Int!): PayoutWorkflow @join__field(graph: PAYMENT)
  getCategory(id: BigInt, slug: String): Category @join__field(graph: PLAN)
  getCategoryList: [Category] @join__field(graph: PLAN)
  getPlan(id: BigInt, slug: String): Plan @join__field(graph: PLAN)
  getPlanList(companyId: BigInt, status: plan_status, statusList: [plan_status], planIds: [BigInt], userLocation: String): [Plan] @join__field(graph: PLAN)
  getPlanSectionList(page: Int!, size: Int!, userLocation: String, filters: QueryFilters!, categories: [BigInt]): PlanSectionListResponse! @join__field(graph: PLAN)
  newGetPlanSectionList(page: Int!, size: Int!, userLocation: String, section: PlanSectionType!, categories: [BigInt], planFilters: PlanFilters): NewPlanSectionListResponse! @join__field(graph: PLAN)
  getPlanListForUser(userId: BigInt!): [Plan] @join__field(graph: PLAN)
  getWorkflowData: Workflow @join__field(graph: PLAN)
  getPlanFeature(id: BigInt!): PlanFeature @join__field(graph: PLAN)
  getPlanFeatureList: [PlanFeature] @join__field(graph: PLAN)
  getPlanPrice(id: BigInt!): PlanPrice @join__field(graph: PLAN)
  getPlanPriceList: [PlanPrice] @join__field(graph: PLAN)
  getPlanProductVariantPrice(id: BigInt!): PlanProductVariantPrice @join__field(graph: PLAN)
  getPlanProductVariantPriceList: [PlanProductVariantPrice] @join__field(graph: PLAN)
  getProduct(id: BigInt!, deleted: Boolean): Product @join__field(graph: PRODUCT)
  getProductList(company_id: BigInt!, deleted: Boolean): [Product] @join__field(graph: PRODUCT)
  getProductMedia(id: BigInt!): ProductMedia @join__field(graph: PRODUCT)
  getProductMediaList(product_id: BigInt, product_variant_id: BigInt): [ProductMedia] @join__field(graph: PRODUCT)
  getProductVariant(id: Int!, deleted: Boolean): ProductVariant @join__field(graph: PRODUCT)
  getProductVariantList(product_id: BigInt!, deleted: Boolean): [ProductVariant] @join__field(graph: PRODUCT)
  getProductVariantListPerCompany(company_id: BigInt!): [ProductVariant] @join__field(graph: PRODUCT)
  getProductVariantListPerCompanyPaginated(company_id: BigInt!, page: BigInt!, limit: BigInt!, search: String, filter: ProductVariantFilter): [ProductVariant] @join__field(graph: PRODUCT)
  getProductVariantPrice(id: Int!): ProductVariantPrice @join__field(graph: PRODUCT)
  getProductVariantPriceList(product_variant_id: BigInt!): [ProductVariantPrice] @join__field(graph: PRODUCT)
  getCart(user_id: BigInt): Cart @join__field(graph: SUBSCRIPTION)
  getSubscription(id: BigInt!): BoxSubscription @join__field(graph: SUBSCRIPTION)
  getSubscriptionList(planId: BigInt, userId: BigInt, vendorId: BigInt): [BoxSubscription] @join__field(graph: SUBSCRIPTION)
  getSubscriptionPlanProductVariant(id: BigInt!): SubscriptionPlanProductVariant @join__field(graph: SUBSCRIPTION)
  getSubscriptionPlanProductVariantList(subscription_id: BigInt!): [SubscriptionPlanProductVariant] @join__field(graph: SUBSCRIPTION)
  getUploadLink(extension: String!): UploadLink @join__field(graph: UPLOAD)
  getAddress(id: Int!): Address @join__field(graph: USER)
  getAddressList: [Address] @join__field(graph: USER)
  getUser(id: Int, email: String): User @join__field(graph: USER)
  getUserList(filter: UserListFilter): [User] @join__field(graph: USER)
  verify(email: String!): Verify @join__field(graph: USER)
}

input QueryFilters
  @join__type(graph: PLAN)
{
  recommended: Boolean!
  top_rated: Boolean!
  bcorp: Boolean!
}

enum recurring_type
  @join__type(graph: SUBSCRIPTION)
{
  WEEKLY @join__enumValue(graph: SUBSCRIPTION)
  BIWEEKLY @join__enumValue(graph: SUBSCRIPTION)
  MONTHLY @join__enumValue(graph: SUBSCRIPTION)
  QUARTERLY @join__enumValue(graph: SUBSCRIPTION)
}

type RegexRule
  @join__type(graph: COMPANY)
{
  type: RuleType
  field: RuleField
  pattern: String
  deliver: Boolean
}

enum request_type
  @join__type(graph: ECOMMERCE)
{
  APP_UNINSTALLED @join__enumValue(graph: ECOMMERCE)
  BULK_OPERATIONS_FINISH @join__enumValue(graph: ECOMMERCE)
  shop_redact @join__enumValue(graph: ECOMMERCE)
  customer_redact @join__enumValue(graph: ECOMMERCE)
  customer_data @join__enumValue(graph: ECOMMERCE)
}

enum role_company_media_type
  @join__type(graph: COMPANY)
  @join__type(graph: PLAN)
{
  LOGO @join__enumValue(graph: COMPANY) @join__enumValue(graph: PLAN)
  COVER @join__enumValue(graph: COMPANY) @join__enumValue(graph: PLAN)
  AVATAR @join__enumValue(graph: COMPANY) @join__enumValue(graph: PLAN)
  VIDEO @join__enumValue(graph: COMPANY) @join__enumValue(graph: PLAN)
}

enum role_company_type
  @join__type(graph: ECOMMERCE)
  @join__type(graph: COMPANY)
{
  VENDOR @join__enumValue(graph: ECOMMERCE) @join__enumValue(graph: COMPANY)
  CORP @join__enumValue(graph: ECOMMERCE) @join__enumValue(graph: COMPANY)
}

type Rule
  @join__type(graph: COMPANY)
{
  id: BigInt!
  shipping_zone_id: BigInt
  schema_version: String
  is_delivery_related: Boolean
  rule: RuleValue
  shipping_zone_price: [ShippingZonePrice]
}

input RuleCreateInput
  @join__type(graph: COMPANY)
{
  shipping_zone_id: BigInt
  schema_version: String!
  is_delivery_related: Boolean!
  rule: RuleValueInput!
  shipping_zone_price: [ShippingZonePriceEmbeddedInput]
}

input RuleEmbeddedInput
  @join__type(graph: COMPANY)
{
  schema_version: String
  is_delivery_related: Boolean
  rule: RuleValueInput
  shipping_zone_price: [ShippingZonePriceEmbeddedInput]
}

enum RuleField
  @join__type(graph: COMPANY)
{
  CITY @join__enumValue(graph: COMPANY)
  STATE @join__enumValue(graph: COMPANY)
  COUNTY @join__enumValue(graph: COMPANY)
  POSTAL_CODE @join__enumValue(graph: COMPANY)
}

enum RuleType
  @join__type(graph: COMPANY)
{
  LIST @join__enumValue(graph: COMPANY)
  REGEX @join__enumValue(graph: COMPANY)
}

input RuleUpdateInput
  @join__type(graph: COMPANY)
{
  shipping_zone_id: BigInt!
  schema_version: String
  is_delivery_related: Boolean
  rule: RuleValueInput
  shipping_zone_price: [ShippingZonePriceEmbeddedInput]
}

union RuleValue
  @join__type(graph: COMPANY)
  @join__unionMember(graph: COMPANY, member: "ListRule")
  @join__unionMember(graph: COMPANY, member: "RegexRule")
 = ListRule | RegexRule

input RuleValueInput
  @join__type(graph: COMPANY)
{
  type: RuleType!
  field: RuleField!
  values: [String]
  pattern: String
  deliver: Boolean
}

union SectionItem
  @join__type(graph: PLAN)
  @join__unionMember(graph: PLAN, member: "Plan")
  @join__unionMember(graph: PLAN, member: "Company")
 = Plan | Company

type ShippingZone
  @join__type(graph: COMPANY, key: "id")
{
  id: BigInt!
  actor: BigInt
  country: String
  whole_country_delivery: Boolean
  company_id: BigInt
  company: Company
  shipping_zone_price: [ShippingZonePrice]
  shipping_zone_rule: [Rule]
}

input ShippingZoneCreateInput
  @join__type(graph: COMPANY)
{
  company_id: BigInt!
  country: String!
  whole_country_delivery: Boolean!
  shipping_zone_price: [ShippingZonePriceEmbeddedInput]
  shipping_zone_rule: [RuleEmbeddedInput]
}

type ShippingZonePrice
  @join__type(graph: COMPANY, key: "id")
{
  id: BigInt!
  currency: String
  amount: String
  shipping_zone_id: BigInt
  shipping_zone: ShippingZone
  shipping_zone_rule_id: BigInt
  shipping_zone_rule: Rule
  delivery_threshold: Float
}

input ShippingZonePriceCreateInput
  @join__type(graph: COMPANY)
{
  currency: String!
  amount: String!
  shipping_zone_id: BigInt
  shipping_zone_rule_id: BigInt
  delivery_threshold: Float!
}

input ShippingZonePriceEmbeddedInput
  @join__type(graph: COMPANY)
{
  currency: String
  amount: String
  delivery_threshold: Float
}

input ShippingZonePriceUpdateInput
  @join__type(graph: COMPANY)
{
  currency: String
  amount: String
  delivery_threshold: Float
}

input ShippingZoneUpdateInput
  @join__type(graph: COMPANY)
{
  company_id: BigInt!
  country: String
  whole_country_delivery: Boolean
  shipping_zone_price: [ShippingZonePriceEmbeddedInput]
  shipping_zone_rule: [RuleEmbeddedInput]
}

scalar SignedUrl
  @join__type(graph: COMPANY)
  @join__type(graph: PLAN)
  @join__type(graph: PRODUCT)
  @join__type(graph: UPLOAD)
  @join__type(graph: USER)

enum status_type
  @join__type(graph: SUBSCRIPTION)
{
  ACTIVE @join__enumValue(graph: SUBSCRIPTION)
  PAUSED @join__enumValue(graph: SUBSCRIPTION)
  SKIP @join__enumValue(graph: SUBSCRIPTION)
  CANCELLED @join__enumValue(graph: SUBSCRIPTION)
  DRAFT @join__enumValue(graph: SUBSCRIPTION)
  COMPLETED @join__enumValue(graph: SUBSCRIPTION)
  ONCE_OFF @join__enumValue(graph: SUBSCRIPTION)
  PAYMENT_FAILURE @join__enumValue(graph: SUBSCRIPTION)
}

type SubscriptionCart
  @join__type(graph: SUBSCRIPTION)
{
  subscription_id: BigInt
  plan_id: BigInt
  products: [SubscriptionPlanProductVariant]
  recurring: recurring_type
  amount: Float
  country: String
  currency: String
  plan_type: plan_type
  company: Company
}

type SubscriptionPlanProductVariant
  @join__type(graph: PLAN, key: "id")
  @join__type(graph: SUBSCRIPTION, key: "id")
{
  id: BigInt!
  subscription_id: BigInt! @join__field(graph: SUBSCRIPTION)
  quantity: Int @join__field(graph: SUBSCRIPTION)
  plan_product_variant_id: BigInt! @join__field(graph: SUBSCRIPTION)
  plan_product_variant: PlanProductVariant @join__field(graph: SUBSCRIPTION)
}

type SyncProductFieldsMap
  @join__type(graph: ECOMMERCE)
{
  metaFields: [String]
  talyFields: [String]
  mapping: [ProductFieldsMap]
}

enum TimeFrame
  @join__type(graph: PAYMENT)
{
  LAST_12_MONTHS @join__enumValue(graph: PAYMENT)
  LAST_30_DAYS @join__enumValue(graph: PAYMENT)
  LAST_7_DAYS @join__enumValue(graph: PAYMENT)
  LAST_24_HOURS @join__enumValue(graph: PAYMENT)
}

input UpdateClickIdInput
  @join__type(graph: USER)
{
  id: ID!
  user_id: ID
  company_id: ID
  click_id: String
  subscription_id: ID
}

input UpdateEcommercePlanFeatureInput
  @join__type(graph: ECOMMERCE)
{
  id: BigInt!
  plan_id: BigInt
  feature: JSON
}

input UpdateEcommercePlanInput
  @join__type(graph: ECOMMERCE)
{
  id: BigInt!
  company_id: BigInt
  title: String!
  description: String
  delivery_details: String
  allow_delivery_preference: Boolean
  media_cover: String
  plan_type: plan_type_ecommerce
  pricing_type: pricing_type_ecommerce
  terms: String
  voucher: Boolean
  recurring: JSON
  duration_value: Int
  duration_type: duration_type_ecommerce
  products: [UpdateEcommerceProductInput]
  features: [UpdateEcommercePlanFeatureInput]
  prices: [UpdateEcommercePlanPriceInput]
}

input UpdateEcommercePlanPriceInput
  @join__type(graph: ECOMMERCE)
{
  id: BigInt!
  plan_id: BigInt
  country: String
  currency: String
  amount: Float
}

input UpdateEcommerceProductInput
  @join__type(graph: ECOMMERCE)
{
  id: BigInt!
  company_id: BigInt!
  name: String!
  description: String
  brand: String
  unit: String
  subunit: String
  subunit_amount: Int
  foreign_ids: JSON
  media: [UpdateEcommerceProductMediaInput]
  product_variant: [UpdateEcommerceProductVariantInput]
}

input UpdateEcommerceProductMediaInput
  @join__type(graph: ECOMMERCE)
{
  id: BigInt!
  product_id: BigInt!
  media: JSON
}

input UpdateEcommerceProductVariantInput
  @join__type(graph: ECOMMERCE)
{
  id: BigInt!
  product_id: BigInt!
  name: String!
  description: String
  sku: String
  volume_or_weight: String
  nutritional_facts: String
  ingredients: String
  allergens: String
  age_restricted: Boolean
  age: Int
  in_stock: Boolean
  foreign_ids: JSON
  product_variant_price: [UpdateEcommerceProductVariantPriceInput]
}

input UpdateEcommerceProductVariantPriceInput
  @join__type(graph: ECOMMERCE)
{
  id: BigInt!
  product_variant_id: BigInt!
  country: String
  currency: String
  amount: Float
}

input UpdateInvoiceItemInput
  @join__type(graph: PAYMENT)
{
  id: BigInt!
  status: String
  total_amount: Float
}

input UpdatePayoutInput
  @join__type(graph: PAYMENT)
{
  id: BigInt!
  status: String!
}

input UpdatePlanInput
  @join__type(graph: PLAN)
{
  id: BigInt!
  title: String!
  company_id: BigInt!
  foreign_ids: JSON
  description: String
  delivery_details: String
  terms: String
  allow_delivery_preference: Boolean
  voucher: Boolean
  recurring: JSON
  duration_value: Int
  duration_type: duration_type
  category_id: BigInt
  media_cover: [PlanMediaInputDefinition]!
  status: plan_status
  tag: JSON
  recurrent_discount_percent: Float
  allow_once_payment: Boolean
  pricing_type: pricing_type
  plan_type: plan_type!
  bundle_definition: AddBundleDefinitionFeatureInput
  plan_price: [PriceInput]
  user_sales_limit: Int
  total_sales_limit: Int
  products: [PlanProductArgInput!]
}

input UpdateProductInput
  @join__type(graph: PRODUCT)
{
  id: BigInt!
  company_id: BigInt
  name: String
  description: String
  brand: String
  product_media: [MediaInputDefinition]
  unit: String
  unit_plural: String
  breakdown: String
  foreign_ids: JSON
  product_variant: [UpdateProductVariantInput]
}

input UpdateProductVariantInput
  @join__type(graph: PRODUCT)
{
  id: BigInt
  name: String!
  description: String
  description_long: String
  sku: String
  volume_or_weight: String
  product_variant_media: [MediaInputDefinition]
  nutritional_facts: String
  ingredients: String
  allergens: String
  age_restricted: Boolean
  age: Int
  in_stock: Boolean
  foreign_ids: JSON
  product_variant_price: [UpdateProductVariantPriceInput!]!
}

input UpdateProductVariantPriceInput
  @join__type(graph: PRODUCT)
{
  id: BigInt
  country: String
  currency: String
  amount: Float
  created_at: DateTime
  updated_at: DateTime
}

type UploadLink
  @join__type(graph: UPLOAD)
{
  uploadUrl: String
  url: String
  key: String
}

type User
  @join__type(graph: PAYMENT, key: "id", resolvable: false)
  @join__type(graph: SUBSCRIPTION, key: "id")
  @join__type(graph: USER, key: "id")
{
  id: BigInt!
  first_name: String! @join__field(graph: USER)
  last_name: String! @join__field(graph: USER)
  email: String! @join__field(graph: USER)
  email_verified_at: DateTime @join__field(graph: USER)
  phone_country_code: String @join__field(graph: USER)
  phone_number: String @join__field(graph: USER)
  gender: String @join__field(graph: USER)
  birthday: DateTime @join__field(graph: USER)
  phone_verified_at: DateTime @join__field(graph: USER)
  employer_id: BigInt @join__field(graph: USER)
  job_role: String @join__field(graph: USER)
  policy_agreement: Boolean @join__field(graph: USER)
  marketing_consent: Boolean @join__field(graph: USER)
  foreign_ids: JSON @join__field(graph: USER)
  media_profile: SignedUrl @join__field(graph: USER)
  addresses: [Address] @join__field(graph: USER)
  company: Company @join__field(graph: USER)
  cart: Cart @join__field(graph: USER)
}

input UserInput
  @join__type(graph: USER)
{
  first_name: String!
  last_name: String!
  email: String!
  phone_country_code: String
  phone_number: String
  gender: String
  birthday: DateTime
  phone_verified_at: DateTime
  employer_id: BigInt
  job_role: String
  policy_agreement: Boolean
  marketing_consent: Boolean
  media_profile: String
  impact_id: String
}

input UserListFilter
  @join__type(graph: USER)
{
  type: UserType
  name: String
  company_name: String
  email: String
}

enum UserType
  @join__type(graph: USER)
{
  VENDOR @join__enumValue(graph: USER)
  CONSUMER @join__enumValue(graph: USER)
}

input UserUpdateInput
  @join__type(graph: USER)
{
  first_name: String
  last_name: String
  email: String
  phone_country_code: String
  phone_number: String
  gender: String
  birthday: DateTime
  phone_verified_at: DateTime
  employer_id: BigInt
  job_role: String
  policy_agreement: Boolean
  marketing_consent: Boolean
  media_profile: String
  impact_id: String
  vendor_id: BigInt
}

type Verify
  @join__type(graph: USER)
{
  success: Boolean
  message: String
}

type Workflow
  @join__type(graph: PLAN)
{
  data: JSON
}
